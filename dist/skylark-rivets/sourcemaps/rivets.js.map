{"version":3,"sources":["rivets.js"],"names":["define","skylark","sightglass","Rivets","options","extensions","public","binders","components","formatters","adapters","prefix","templateDelimiters","rootInterface","preloadData","executeFunctions","iterationAlias","modelName","handler","context","ev","binding","this","call","view","models","configure","descriptor","key","option","value","bind","el","View","init","component","data","scope","template","document","createElement","HTMLElement","firstChild","removeChild","appendChild","innerHTML","initialize","rivets"],"mappings":";;;;;;;AAAAA,QACE,wBACA,gBACA,SAASC,EAAQC,GAKjB,IAAKC,GACHC,SAAU,SAAU,qBAAsB,gBAAiB,cAAe,UAAW,oBACrFC,cACAA,YAAa,UAAW,aAAc,aAAc,YACpDC,QACEC,WACAC,cACAC,cACAC,YACAC,OAAQ,KACRC,oBAAqB,IAAK,KAC1BC,cAAe,IACfC,aAAa,EACbC,kBAAkB,EAClBC,eAAgB,SAASC,GACvB,MAAO,IAAMA,EAAY,KAE3BC,QAAS,SAASC,EAASC,EAAIC,GAC7B,OAAOC,KAAKC,KAAKJ,EAASC,EAAIC,EAAQG,KAAKC,SAE7CC,UAAW,SAAStB,GAClB,IAAIuB,EAAYC,EAAKC,EAAQC,EAI7B,IAAKD,KAHU,MAAXzB,IACFA,MAEaA,EAEb,GADA0B,EAAQ1B,EAAQyB,GACD,YAAXA,GAAmC,eAAXA,GAAsC,eAAXA,GAAsC,aAAXA,EAChF,IAAKD,KAAOE,EACVH,EAAaG,EAAMF,GACnBzB,EAAO0B,GAAQD,GAAOD,OAGxBxB,EAAe,OAAE0B,GAAUC,GAIjCC,KAAM,SAASC,EAAIP,EAAQrB,GACzB,IAAIoB,EASJ,OARc,MAAVC,IACFA,MAEa,MAAXrB,IACFA,OAEFoB,EAAO,IAAIrB,EAAO8B,KAAKD,EAAIP,EAAQrB,IAC9B2B,OACEP,GAETU,KAAM,SAASC,EAAWH,EAAII,GAC5B,IAAIC,EAAOC,EAAUd,EASrB,GARY,MAARY,IACFA,MAEQ,MAANJ,IACFA,EAAKO,SAASC,cAAc,SAG9BF,GADAH,EAAYhC,EAAe,OAAEK,WAAW2B,IACnBG,SAASf,KAAKD,KAAMU,cACjBS,YAAa,CACnC,KAAOT,EAAGU,YACRV,EAAGW,YAAYX,EAAGU,YAEpBV,EAAGY,YAAYN,QAEfN,EAAGa,UAAYP,EAKjB,OAHAD,EAAQF,EAAUW,WAAWvB,KAAKD,KAAMU,EAAII,IAC5CZ,EAAO,IAAIrB,EAAO8B,KAAKD,EAAIK,IACtBN,OACEP,KAKb,OAAOvB,EAAQ8C,OAAS5C","file":"../rivets.js","sourcesContent":["define([\n  \"skylark-langx/skylark\",\n  \"./sightglass\"\n],function(skylark,sightglass) {\n// Rivets.js\n// version: 0.9.6\n// author: Michael Richards\n// license: MIT\n  var  Rivets = {\n    options: ['prefix', 'templateDelimiters', 'rootInterface', 'preloadData', 'handler', 'executeFunctions'],\n    extensions: [],\n    extensions: ['binders', 'formatters', 'components', 'adapters'],\n    \"public\": {\n      binders: {},\n      components: {},\n      formatters: {},\n      adapters: {},\n      prefix: 'rv',\n      templateDelimiters: ['{', '}'],\n      rootInterface: '.',\n      preloadData: true,\n      executeFunctions: false,\n      iterationAlias: function(modelName) {\n        return '%' + modelName + '%';\n      },\n      handler: function(context, ev, binding) {\n        return this.call(context, ev, binding.view.models);\n      },\n      configure: function(options) {\n        var descriptor, key, option, value;\n        if (options == null) {\n          options = {};\n        }\n        for (option in options) {\n          value = options[option];\n          if (option === 'binders' || option === 'components' || option === 'formatters' || option === 'adapters') {\n            for (key in value) {\n              descriptor = value[key];\n              Rivets[option][key] = descriptor;\n            }\n          } else {\n            Rivets[\"public\"][option] = value;\n          }\n        }\n      },\n      bind: function(el, models, options) {\n        var view;\n        if (models == null) {\n          models = {};\n        }\n        if (options == null) {\n          options = {};\n        }\n        view = new Rivets.View(el, models, options);\n        view.bind();\n        return view;\n      },\n      init: function(component, el, data) {\n        var scope, template, view;\n        if (data == null) {\n          data = {};\n        }\n        if (el == null) {\n          el = document.createElement('div');\n        }\n        component = Rivets[\"public\"].components[component];\n        template = component.template.call(this, el);\n        if (template instanceof HTMLElement) {\n          while (el.firstChild) {\n            el.removeChild(el.firstChild);\n          }\n          el.appendChild(template);\n        } else {\n          el.innerHTML = template;\n        }\n        scope = component.initialize.call(this, el, data);\n        view = new Rivets.View(el, scope);\n        view.bind();\n        return view;\n      }\n    }\n  };\n\n  return skylark.rivets = Rivets;\n\n});\n"]}